#include <iostream>
#include <vector>

class Heap {
    std::vector<int> data;
public:
    Heap(const std::vector<int> &new_data) { //create a heap
        data = new_data;
        heapify();
    }

    int PopMin() { // minimum elementy hanuma verev
        int ans = data[0];
        std::swap(data[0], data.back());
        data.pop_back();
        if (data.size() != 0) {
            SiftDown(0);
        }
        return ans;
    }

private:
    void heapify() {
        for (int i = 0; i < data.size(); ++i) {
            SiftUp(i);
        }
    }

    void SiftUp(int i) {
        while(data[i] < data[(i - 1) / 2]) {
            std::swap(data[i], data[(i - 1) / 2]);
            i = (i - 1) / 2;
        }
    }

    void SiftDown(int i) {
        if (2 * i + 1 > data.size() - 1) {
            return;
        } else if (2 * i + 2 > data.size() - 1) {
            if (data[i] > data[2 * i + 1]) {
                std::swap(data[i], data[2 * i + 1]);
            }
        } else {
            int minChild;
            if (data[2 * i + 1] <= data[2 * i + 2]) {
                minChild = 2 * i + 1;
            } else {
                minChild = 2 * i + 2;
            }
            if (data[i] > data[minChild]) {
                std::swap(data[i], data[minChild]);
                SiftDown(minChild);
            }
        }
    }
};

std::vector<int> Input(int size) {
    std::vector<int> ans;
    int in;
    for (int i = 0; i < size; ++i) {
        std::cin >> in;
        ans.push_back(in);
    }
    return ans;
}


void Print(const std::vector<int> &vec) {
    for (std::size_t i = 0; i < vec.size(); ++i) {
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl;
}

std::vector<int> HeapSort(const std::vector<int> &vec) {
    Heap h(vec);
    std::vector<int> ans;
    int m;
    for (int i = 0; i < vec.size(); ++i) {
        m = h.PopMin();
        ans.push_back(m);
    }
    return ans;
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> vec = Input(n);
    std::vector<int> sorted_vec = HeapSort(vec);
    Print(sorted_vec);
}
